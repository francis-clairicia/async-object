[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "async-object"
authors = [{name = "FrankySnow9", email = "clairicia.rcj.francis@gmail.com"}]
requires-python = ">=3.8"
readme = "README.md"
license = {file = "LICENSE"}
dependencies = [

]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed"
]
dynamic = ["version", "description"]

[project.urls]
Home = "https://github.com/francis-clairicia/async-object"

############################ Flit configuration ############################
[tool.flit.sdist]
include = [
  ".flake8",
]
exclude = [
  ".github/",
  "tests/",
  ".gitignore",
  ".pre-commit-config.yaml",
  "tox.ini",
]

############################ Development tools configuration ############################

[tool.isort]
profile = "black"
line_length = 130
combine_as_imports = true
add_imports = ["from __future__ import annotations"]

[tool.black]
line-length = 130
target-version = ["py38", "py39", "py310", "py311"]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
python_version = "3.8"
show_error_codes = true
strict = true
warn_return_any = false
enable_error_code = ["ignore-without-code", "unused-awaitable"]

[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source_pkgs = [
  "async_object",
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Don't complain about type hinting code:
  "if (typing\\.)?TYPE_CHECKING:",
  "@(typing\\.)?overload",
]
