[build-system]
requires = ["hatchling >=1.13,<2"]
build-backend = "hatchling.build"

[project]
name = "async-object"
description = "async-object let you write classes with async def __init__"
authors = [{name = "FrankySnow9", email = "clairicia.rcj.francis@gmail.com"}]
requires-python = ">=3.9"
readme = "README.md"
license-files = { paths = ["LICENSE"] }
dependencies = []
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed"
]
dynamic = ["version"]
keywords = ["async", "init", "asyncio"]

[project.urls]
Homepage = "https://github.com/francis-clairicia/async-object"

[project.optional-dependencies]
mypy = [
    "mypy>=1.8.0",
]

############################ hatchling configuration ############################

[tool.hatch.build]
exclude = [
  ".github/",
  ".vscode/",
]

[tool.hatch.build.targets.wheel]
packages = ["src/async_object"]

[tool.hatch.version]
path = "src/async_object/__init__.py"

############################ Development tools configuration ############################

[tool.pdm.dev-dependencies]
dev = [
    "pre-commit>=2.20.0",
    "build>=0.10",
    "twine>=4.0.2",
]
tox = [
    "tox<5,>=4.0.8",
]
format = [
    "isort!=5.11.0,>=5.10.1",
    "black>=22.6.0",
]
flake8 = [
    "flake8>=6.0",
    "flake8-pyi>=22.11.0",
]
test = [
    "pytest~=7.2",
    "pytest-asyncio~=0.20",
    "pytest-cov<5,>=4.0",
    "coverage[toml]",
    "typing-extensions>=4.9.0",
]
coverage = [
    "coverage[toml]",
]

[tool.isort]
profile = "black"
line_length = 130
combine_as_imports = true
add_imports = ["from __future__ import annotations"]

[tool.black]
line-length = 130
target-version = ["py39", "py310", "py311", "py312"]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
python_version = "3.9"
show_error_codes = true
strict = true
warn_return_any = false
enable_error_code = ["ignore-without-code", "unused-awaitable"]
plugins = [
  "mypy.plugins.proper_plugin",
  "async_object.contrib.mypy.plugin",
]

[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source_pkgs = [
  "async_object",
]
omit = [
  "*/async_object/contrib/**/*.py",
]
relative_files = true

[tool.coverage.paths]
source = [
  "src/",
  ".tox/*/lib/python*/site-packages",
  '.tox\*\Lib\site-packages',  # Keep single quote here (TOML raw string syntax, useful for '\')
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Don't complain about type hinting code:
  "if (typing\\.)?TYPE_CHECKING:",
  "@(typing\\.)?overload",
]
